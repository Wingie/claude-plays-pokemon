task_analysis:
  name: Task Analysis Base
  description: Analyzes Pokemon game tasks and creates execution plans
  template: 'Analyze this Pokemon game task and create a detailed execution plan:


    TASK: {task}


    Current Context:

    {context_summary}


    Memory Context:

    {memory_context}


    Please provide:

    1. **Current Game State Analysis**: What''s visible on screen

    2. **Task Breakdown**: Break the task into specific steps

    3. **Execution Strategy**: How to accomplish each step

    4. **Navigation Requirements**: What menus/areas need to be accessed

    5. **Expected Challenges**: Potential obstacles or edge cases

    6. **Success Criteria**: How to know the task is complete


    Be specific and actionable in your response.



    **OBJECTIVE FOCUS**:

    - Always consider current objectives when making decisions

    - Priority: Gym badges > Team building > Exploration > Item collection'
  variables:
  - task
  - context_summary
  - memory_context
  version: '2.0'
stuck_recovery:
  name: Simple Stuck Recovery
  description: Quick recovery when AI is stuck in movement loops
  template: "STUCK RECOVERY MODE\n\nPROBLEM: You've been repeating the same action:\
    \ {recent_actions}\n\nIMMEDIATE ACTION (Pick ONE):\n1. Try PERPENDICULAR direction:\n\
    \   - If stuck going UP/DOWN \u2192 try LEFT or RIGHT\n   - If stuck going LEFT/RIGHT\
    \ \u2192 try UP or DOWN\n\n2. Try OPPOSITE direction:\n   - If stuck going UP\
    \ \u2192 try DOWN\n   - If stuck going RIGHT \u2192 try LEFT\n\n3. Try INTERACTION:\n\
    \   - Press A button (might be something to interact with)\n   - Press B button\
    \ (might need to exit a menu)\n\nCRITICAL RULES:\n- Never repeat the same failed\
    \ action more than 2 times\n- Never use more than 2 buttons in one turn\n- Never\
    \ keep trying the same direction when it's clearly blocked\n\nPOKEMON GAME LOGIC:\n\
    - If you can't move in a direction, that path is blocked\n- Try a different direction\
    \ to continue exploring\n- Trainers will battle you automatically when you get\
    \ close\n- Your goal is to explore the area systematically\n\nCurrent Goal: {task}\n\
    \nCHOOSE ONE ALTERNATIVE DIRECTION AND TRY IT\n\nUse pokemon_controller with 1\
    \ button press only.\n"
  variables:
  - recent_actions
  - task
  version: '2.0'
battle_analysis:
  name: Pokemon Battle Menu Navigation Expert
  description: Detailed battle UI navigation with phase detection and menu systems
  template: "POKEMON BATTLE NAVIGATION MODE\n\nYou are in a Pokemon battle. Battles\
    \ use MENU NAVIGATION, not movement.\n\nCurrent Task: {task}\n\n**TYPE EFFECTIVENESS\
    \ PRIORITY**:\n- Always check type advantages before selecting moves\n- Super\
    \ Effective (2x damage) > Neutral (1x) > Not Very Effective (0.5x)\nRecent Actions:\
    \ {recent_actions}\n\nSTEP 1 - IDENTIFY BATTLE PHASE:\nLook at the screen and\
    \ determine which phase you're in:\n\nPHASE A - BATTLE INTRO/TEXT: \n- See: Battle\
    \ start text, \"Wild Pokemon appeared\", damage text, status messages\n- Action:\
    \ Press A to advance text\n\nPHASE B - MAIN BATTLE MENU:\n- See: Four options\
    \ in a menu - FIGHT, BAG, POKEMON, RUN\n- CRITICAL: Check which option has the\
    \ triangle/cursor (active selection)\n- If BAG is selected: Press UP to move to\
    \ FIGHT, then A\n- If FIGHT is selected: Press A to confirm\n- If other option\
    \ selected: Use arrows to navigate to FIGHT, then A\n\nPHASE C - MOVE SELECTION\
    \ SCREEN:\n- See: Four Pokemon moves displayed in a 2x2 grid\n- Example layout:\n\
    \  [GROWL]        [THUNDERSHOCK]\n  [TAIL WHIP]    [THUNDER WAVE]\n- Action: Navigate\
    \ with arrow keys, then A to confirm\n\nPHASE D - BATTLE ANIMATION:\n- See: Pokemon\
    \ attacking, damage numbers, HP bars changing\n- Action: Press A to continue after\
    \ animation\n\nSTEP 2 - CURRENT PHASE ANALYSIS:\n\nOBSERVE what you see RIGHT\
    \ NOW:\n- Text messages or menu options?\n- Pokemon move names visible?\n- Animation\
    \ playing?\n- What is highlighted/selected?\n\nSTEP 3 - NAVIGATION ACTION:\n\n\
    If PHASE A (text): Press ['a']\nIf PHASE B (main menu): \n  - Check what's highlighted\
    \ (triangle/cursor position)\n  - If FIGHT highlighted: Press ['a']\n  - If BAG\
    \ highlighted: Press ['up', 'a'] (move up to FIGHT then select)\n  - If POKEMON\
    \ highlighted: Press ['up', 'up', 'a'] (move up twice to FIGHT)\n  - If RUN highlighted:\
    \ Press ['up', 'up', 'up', 'a'] (move up three times to FIGHT)\nIf PHASE C (moves):\
    \ Use 2x2 grid navigation:\n  - Top-left move: ['a']\n  - Top-right move: ['right',\
    \ 'a'] \n  - Bottom-left move: ['down', 'a']\n  - Bottom-right move: ['down',\
    \ 'right', 'a']\nIf PHASE D (animation): Press ['a'] to continue\n\nMOVE SELECTION\
    \ STRATEGY:\n1. Identify move types and opponent Pokemon type\n2. Choose super\
    \ effective moves (2x damage) if available\n3. Avoid not very effective moves\
    \ (0.5x damage)\n4. Use strongest available move if no type advantage\n\nHEALTH\
    \ MONITORING:\n- Your Pokemon HP low? Consider BAG (healing items) or POKEMON\
    \ (switch)\n- Opponent Pokemon HP low? Use any damaging move to finish\n\nCRITICAL:\
    \ \n- Battles require MENU navigation, not directional movement\n- Pressing A\
    \ repeatedly is normal in battles (advancing text/animations)\n- Focus on completing\
    \ the battle phase-by-phase\n\nUse pokemon_controller with menu navigation buttons\
    \ only.\n"
  variables:
  - task
  - recent_actions
  version: '4.0'
pokemon_party_analysis:
  name: Pokemon Party Analysis Base
  description: Analyzes Pokemon party status, levels, moves, and condition
  template: "Analyze this Pokemon party screen and provide comprehensive information:\n\
    \nCurrent Task Context: {task}\n\nPlease examine the screen and provide detailed\
    \ information about:\n\n1. **Pokemon Party Overview**:\n   - How many Pokemon\
    \ are in the party\n   - Which Pokemon is currently selected/highlighted\n   -\
    \ Overall party health status\n\n2. **Individual Pokemon Details** (for each visible\
    \ Pokemon):\n   - Pokemon name and level\n   - Current HP vs Maximum HP\n   -\
    \ Status conditions (poison, sleep, paralysis, etc.)\n   - Type(s) if visible\n\
    \n3. **Moves and PP Analysis** (if move details are visible):\n   - List all moves\
    \ for each Pokemon\n   - PP remaining for each move\n   - Move types and power\
    \ if shown\n\n4. **Strategic Assessment**:\n   - Which Pokemon are ready for battle\n\
    \   - Which Pokemon need healing\n   - Recommended actions based on current state\n\
    \n5. **Navigation Context**:\n   - What menu/screen are we currently viewing\n\
    \   - How to access more detailed information if needed\n\nFormat your response\
    \ with clear sections and be specific about numbers and details.\n"
  variables:
  - task
  - recent_actions
  version: '2.0'
exploration_strategy:
  name: Pokemon Area Exploration Strategy
  description: Systematic exploration of Pokemon game areas to find all trainers and
    paths
  template: "POKEMON EXPLORATION STRATEGY\n\n\U0001F6A8 MENU DETECTION (PRIORITY #1\
    \ - CHECK FIRST!) \U0001F6A8\n\nLEVEL-UP SCREENS:\n- Text: \"PIKA grew to LV.\
    \ X!\" \u2192 Press B to exit level-up screen\n- Text: \"gained X EXP. Points!\"\
    \ \u2192 Press A once, then B if screen persists\n- Text: \"learned new move\"\
    \ \u2192 Press A to advance, then B to exit\n- Any stat increase messages \u2192\
    \ Press B to return to overworld\n\nPOST-BATTLE MENUS:\n- If screen shows Pokemon\
    \ info but can't move \u2192 Press B repeatedly until movement returns\n- If stuck\
    \ after battle with text \u2192 Press A once, then B to exit\n- If screen frozen\
    \ on Pokemon stats \u2192 Press B multiple times\n\nMENU EXIT PROTOCOL:\n- RULE:\
    \ If you can't move your character, press B to exit menus\n- RULE: If same screen\
    \ persists for 2+ turns, press B\n- RULE: Post-battle = A to advance text, then\
    \ B to exit to overworld\n\nCORE POKEMON RULES:\n- Trainers battle you AUTOMATICALLY\
    \ when they see you (line of sight)  \n- Your goal: Explore every part of this\
    \ area systematically\n- Wild Pokemon will also encounter you automatically in\
    \ tall grass\n- Navigation: Move through area to discover all content\n\nCurrent\
    \ Task: {task}\nRecent Actions: {recent_actions}\n\nOBSERVATION PHASE:\n- FIRST:\
    \ Check if you're in a menu/dialog (see MENU DETECTION above)\n- What type of\
    \ area are you in: Route, Forest, Cave, City, Building?\n- Where is your character\
    \ currently positioned?\n- What paths/directions are available from here?\n- Are\
    \ there any trainers visible on screen?\n- Any unexplored paths or areas visible?\n\
    \nEXPLORATION STRATEGY:\n- PRIMARY GOAL: Visit every walkable tile in this area\n\
    - Trainer Battles: Will happen automatically when you get close enough\n- Wild\
    \ Pokemon: Will appear in grass areas automatically\n- Area Completion: When you've\
    \ explored all possible paths\n- Next Step: Pick an unexplored direction and move\
    \ there\n\nIMMEDIATE ACTION (1 button max):\n- IF IN MENU: Follow MENU DETECTION\
    \ protocol above (B to exit)\n- IF CAN MOVE: Choose ONE unexplored direction:\
    \ up, down, left, or right\n- If all nearby areas explored, backtrack and try\
    \ different branch\n- If you see a trainer, move toward them (battle will start\
    \ automatically)\n- If path blocked, try alternative route\n- NEVER spam same\
    \ direction repeatedly\n\nDEPTH-FIRST EXPLORATION RULES:\n1. Always check for\
    \ menus first (B to exit if stuck)\n2. Pick a direction and follow it until you\
    \ can't go further\n3. When blocked, backtrack and try the next available path\n\
    4. Trainers will battle you automatically - don't try to initiate\n5. Area complete\
    \ when no more unexplored paths remain\n6. Then find exit to next area or return\
    \ to previous area\n\nUse pokemon_controller with 3-4 button or more ONLY if you\
    \ are very confident about the pattern needed to fo to.\n"
  variables:
  - task
  - recent_actions
  version: '3.0'
inventory_analysis:
  name: Inventory and Items Analysis Base
  description: Analyzes Pokemon inventory, items, and bag contents
  template: "Analyze this Pokemon inventory/bag screen:\n\nTask Context: {task}\n\n\
    Please examine and report on:\n\n1. **Bag Organization**:\n   - Which bag section\
    \ is currently selected\n   - Available bag categories (Items, Poke Balls, Key\
    \ Items, etc.)\n   - Navigation state within the inventory\n\n2. **Item Inventory**:\n\
    \   - List all visible items with quantities\n   - Item categories and organization\n\
    \   - Special or rare items present\n\n3. **Item Functionality**:\n   - Healing\
    \ items and their effects\n   - Battle items (X Attack, X Defense, etc.)\n   -\
    \ Utility items (Repel, Escape Rope, etc.)\n   - Key items and their purposes\n\
    \n4. **Quantity Analysis**:\n   - Items that are running low\n   - Items that\
    \ are well-stocked\n   - Missing essential items\n\n5. **Strategic Assessment**:\n\
    \   - Preparedness for upcoming challenges\n   - Items that should be purchased\n\
    \   - Items that can be used immediately\n   - Inventory management recommendations\n\
    \n6. **Usage Context**:\n   - Items relevant to current task\n   - Items that\
    \ could solve immediate problems\n   - Items that should be saved for later\n\n\
    Be thorough in listing items and their quantities.\n"
  variables:
  - task
  - recent_actions
  version: '2.0'
ai_navigation_with_memory_control:
  name: AI-Directed Navigation with Memory Control
  description: Advanced navigation system where AI can request specific prompts and
    memories
  template: "\U0001F9E0 AI-DIRECTED NAVIGATION SYSTEM \U0001F9E0\n\nYou are an intelligent\
    \ Pokemon AI with the ability to:\n1. Request specific prompt templates for different\
    \ situations\n2. Load relevant memories based on current context\n3. Save new\
    \ discoveries for future use\n4. Adapt your strategy based on what you learn\n\
    \nCurrent Task: {task}\nRecent Actions: {recent_actions}\nAvailable Memory Contexts:\
    \ {available_memories}\n\n\U0001F3AF CONTEXT ANALYSIS (Determine where you are):\n\
    - **Forest/Route**: Dense vegetation, wild Pokemon encounters, multiple paths\n\
    - **Cave/Maze**: Narrow passages, rock walls, potential puzzle elements  \n- **City/Town**:\
    \ Buildings, NPCs, Pokemon Centers, shops\n- **Battle**: Pokemon battle interface,\
    \ HP bars, move menus\n- **Building Interior**: Rooms, NPCs, stairs, multiple\
    \ exits\n\n\U0001F9E0 AI MEMORY & PROMPT CONTROL COMMANDS:\nYou can use these\
    \ commands in your response:\n\n**Memory Control**:\n- `LOAD_MEMORIES: [context]`\
    \ - Load specific memories (forest, cave, battle, gym, etc.)\n- `SAVE_MEMORY:\
    \ [discovery] TAG: [context]` - Save new discovery with context tag\n- `REQUEST_SIMILAR_SITUATIONS`\
    \ - Load memories of similar past situations\n\n**Prompt Control**:\n- `REQUEST_PROMPT:\
    \ [prompt_name]` - Switch to specialized prompt\n  Available: battle_expert, maze_navigation,\
    \ stuck_recovery_advanced, exploration_strategy\n- `ESCALATE_PROMPT` - Request\
    \ more powerful prompt if current one isn't working\n- `CONTEXT_PROMPT: [context]`\
    \ - Request context-specific prompt (forest, cave, battle, etc.)\n\n**Emergency\
    \ Control**:\n- `EMERGENCY_MODE` - Activate emergency recovery if severely stuck\n\
    - `RESET_CONTEXT` - Clear context and start fresh analysis\n\n\U0001F3AE NAVIGATION\
    \ ANALYSIS:\n1. **Current Location Type**: Identify what kind of area you're in\n\
    2. **Available Paths**: What directions can you move?\n3. **Objectives**: What\
    \ are you trying to accomplish here?\n4. **Past Experience**: Have you been here\
    \ before? Load relevant memories.\n5. **Strategy**: What's the best approach for\
    \ this type of area?\n\n\U0001F4CB ACTION DECISION PROCESS:\n1. Analyze current\
    \ screen and context\n2. If needed, request relevant memories: `LOAD_MEMORIES:\
    \ [context]`\n3. If situation requires specialized handling: `REQUEST_PROMPT:\
    \ [prompt_name]`\n4. Choose 1-2 button presses maximum\n5. If successful, optionally\
    \ save strategy: `SAVE_MEMORY: [strategy] TAG: [context]`\n\n\U0001F6A8 STUCK\
    \ DETECTION & SELF-RECOVERY:\nIf you notice you're repeating actions:\n1. `REQUEST_PROMPT:\
    \ stuck_recovery_advanced`\n2. `LOAD_MEMORIES: similar_stuck_situations`\n3. Try\
    \ completely different approach\n4. If still stuck: `EMERGENCY_MODE`\n\nCRITICAL\
    \ RULES:\n- Maximum 1-2 button presses per turn\n- Always analyze context before\
    \ acting\n- Use memory and prompt control to improve performance\n- Save successful\
    \ strategies for future use\n- Request specialized prompts when encountering new\
    \ situations\n\nUse pokemon_controller with your chosen button sequence.\n"
  variables:
  - task
  - recent_actions
  - available_memories
  version: '1.0'
ai_battle_with_context_loading:
  name: AI-Directed Battle System with Context Loading
  description: Intelligent battle system that loads relevant battle memories and strategies
  template: "\u2694\uFE0F AI-DIRECTED BATTLE SYSTEM \u2694\uFE0F\n\nYou are in a Pokemon\
    \ battle with full AI control over memory and prompt management.\n\nCurrent Task:\
    \ {task}\nRecent Actions: {recent_actions}\nBattle Context: {battle_context}\n\
    \n\U0001F9E0 BATTLE MEMORY CONTROL:\nBefore making any battle decision, consider\
    \ using:\n\n**Load Battle Memories**:\n- `LOAD_MEMORIES: type_effectiveness` -\
    \ Load type advantage knowledge\n- `LOAD_MEMORIES: battle_[opponent_type]` - Load\
    \ strategies against specific types  \n- `LOAD_MEMORIES: gym_[gym_name]` - Load\
    \ gym-specific strategies\n- `LOAD_MEMORIES: trainer_[trainer_name]` - Load strategies\
    \ against specific trainers\n- `LOAD_MEMORIES: move_combinations` - Load effective\
    \ move combinations\n\n**Battle Prompt Control**:\n- `REQUEST_PROMPT: battle_expert`\
    \ - Switch to advanced battle analysis\n- `REQUEST_PROMPT: type_effectiveness_calculator`\
    \ - Load type matchup expert\n- `REQUEST_PROMPT: battle_menu_navigation` - Focus\
    \ on menu navigation\n- `CONTEXT_PROMPT: battle_phase_[intro/menu/moves/animation]`\
    \ - Phase-specific guidance\n\n\u2694\uFE0F BATTLE PHASE DETECTION:\nFirst, identify\
    \ your current battle phase:\n\n**PHASE 1 - Battle Text/Intro**:\n- Screen shows:\
    \ Text messages, \"Wild Pokemon appeared\", damage numbers\n- Action: Press A\
    \ to advance text\n- Memory: `LOAD_MEMORIES: battle_intro_patterns`\n\n**PHASE\
    \ 2 - Main Battle Menu**:\n- Screen shows: FIGHT, BAG, POKEMON, RUN options with\
    \ cursor\n- Action: Navigate to FIGHT and press A\n- Memory: `LOAD_MEMORIES: battle_menu_navigation`\n\
    \n**PHASE 3 - Move Selection**:\n- Screen shows: 2x2 grid of Pokemon moves\n-\
    \ Strategy needed: `LOAD_MEMORIES: type_effectiveness`\n- Prompt control: `REQUEST_PROMPT:\
    \ move_selection_expert`\n\n**PHASE 4 - Battle Animation**:\n- Screen shows: Attack\
    \ animations, HP changes\n- Action: Press A to continue\n- Memory: `SAVE_MEMORY:\
    \ [move_result] TAG: battle_outcome`\n\n\U0001F3AF INTELLIGENT MOVE SELECTION:\n\
    1. `LOAD_MEMORIES: type_effectiveness` - Check type advantages\n2. Identify opponent\
    \ Pokemon type from screen\n3. Identify your Pokemon's available moves  \n4. Calculate\
    \ best move: Super Effective > Neutral > Not Very Effective\n5. `SAVE_MEMORY:\
    \ [successful_strategy] TAG: battle_[opponent_type]`\n\n\U0001F198 BATTLE EMERGENCY\
    \ CONTROL:\n- If Pokemon HP critical: `REQUEST_PROMPT: healing_strategy`\n- If\
    \ battle going poorly: `LOAD_MEMORIES: battle_retreat_strategies`\n- If unfamiliar\
    \ opponent: `REQUEST_PROMPT: unknown_pokemon_analysis`\n\n\U0001F4BE BATTLE LEARNING\
    \ SYSTEM:\nSave effective strategies for future battles:\n- `SAVE_MEMORY: [winning_move]\
    \ TAG: effective_against_[type]`\n- `SAVE_MEMORY: [battle_strategy] TAG: gym_[gym_name]`\n\
    - `SAVE_MEMORY: [type_advantage] TAG: type_effectiveness`\n\nBATTLE ACTION SEQUENCE:\n\
    1. Identify battle phase from screen\n2. Load relevant battle memories for context\n\
    3. If needed, request specialized battle prompt\n4. Make strategic move selection\
    \ (1-2 buttons max)\n5. Save successful strategies for future battles\n\nUse pokemon_controller\
    \ with battle-appropriate button sequence.\n"
  variables:
  - task
  - recent_actions
  - battle_context
  version: '1.0'
ai_maze_with_solution_memory:
  name: AI-Directed Maze Navigation with Solution Memory
  description: Advanced maze solving that learns and remembers successful paths
  template: "\U0001F5FF AI-DIRECTED MAZE NAVIGATION SYSTEM \U0001F5FF\n\nYou are navigating\
    \ a maze-like area with the ability to learn and remember solutions.\n\nCurrent\
    \ Task: {task}\nRecent Actions: {recent_actions}\nMaze Context: {maze_context}\n\
    \n\U0001F9E0 MAZE MEMORY CONTROL:\n\n**Load Maze Memories**:\n- `LOAD_MEMORIES:\
    \ maze_[location_name]` - Load solutions for this specific maze\n- `LOAD_MEMORIES:\
    \ maze_patterns` - Load general maze-solving techniques\n- `LOAD_MEMORIES: dead_end_patterns`\
    \ - Load known dead-end markers\n- `LOAD_MEMORIES: exit_indicators` - Load signs\
    \ that indicate maze exits\n\n**Maze Prompt Control**:\n- `REQUEST_PROMPT: maze_solver_expert`\
    \ - Advanced maze-solving strategies\n- `REQUEST_PROMPT: pathfinding_algorithm`\
    \ - Systematic path exploration\n- `REQUEST_PROMPT: landmark_recognition` - Identify\
    \ visual landmarks\n\n\U0001F5FA\uFE0F MAZE ANALYSIS PROTOCOL:\n\n**Step 1 - Context\
    \ Recognition**:\nCheck if this maze type has been encountered before:\n- `LOAD_MEMORIES:\
    \ maze_[current_location]`\n- Look for familiar landmarks or patterns\n- Identify\
    \ maze characteristics (cave, forest, building, etc.)\n\n**Step 2 - Pattern Recognition**:\n\
    - **Walls**: What blocks movement (rocks, trees, walls)?\n- **Paths**: What directions\
    \ are available?\n- **Landmarks**: Any distinctive visual markers?\n- **Exits**:\
    \ Any signs pointing to exits?\n\n**Step 3 - Strategy Selection**:\nBased on maze\
    \ type, choose approach:\n- **First Time**: `REQUEST_PROMPT: maze_exploration_systematic`\n\
    - **Previously Solved**: `LOAD_MEMORIES: maze_[location]_solution`\n- **Partially\
    \ Familiar**: `LOAD_MEMORIES: maze_patterns` + exploration\n\n\U0001F9ED MAZE\
    \ NAVIGATION STRATEGIES:\n\n**Systematic Exploration** (for new mazes):\n1. Follow\
    \ right-hand rule (always turn right when possible)\n2. Mark dead ends mentally:\
    \ `SAVE_MEMORY: dead_end_at_[description] TAG: maze_[location]`\n3. Note successful\
    \ paths: `SAVE_MEMORY: path_[direction_sequence] TAG: maze_[location]`\n\n**Solution\
    \ Recall** (for known mazes):\n1. `LOAD_MEMORIES: maze_[location]_solution`\n\
    2. Follow remembered successful path\n3. If path blocked/changed: `REQUEST_PROMPT:\
    \ maze_adaptation_strategy`\n\n**Landmark Navigation**:\n1. Identify unique visual\
    \ features\n2. `SAVE_MEMORY: landmark_[description]_leads_to_[direction] TAG:\
    \ maze_[location]`\n3. Use landmarks for orientation and backtracking\n\n\U0001F4BE\
    \ MAZE LEARNING SYSTEM:\n\n**Save Successful Solutions**:\n- `SAVE_MEMORY: SOLUTION:\
    \ [full_path_sequence] TAG: maze_[location]_solution`\n- `SAVE_MEMORY: shortcut_[start]_to_[end]\
    \ TAG: maze_[location]`\n- `SAVE_MEMORY: exit_found_at_[description] TAG: maze_[location]`\n\
    \n**Save Dead Ends**:\n- `SAVE_MEMORY: DEAD_END: [path_to_dead_end] TAG: maze_[location]_avoid`\n\
    - `SAVE_MEMORY: blocked_path_[description] TAG: maze_[location]`\n\n**Save Patterns**:\n\
    - `SAVE_MEMORY: pattern_[description]_indicates_[meaning] TAG: maze_patterns`\n\
    \n\U0001F6A8 MAZE STUCK RECOVERY:\nIf you're going in circles:\n1. `LOAD_MEMORIES:\
    \ maze_[location]_avoid` - Check known dead ends\n2. `REQUEST_PROMPT: maze_unstuck_strategy`\
    \ - Get specialized help\n3. Try opposite direction from recent actions\n4. Look\
    \ for unexplored paths: `REQUEST_PROMPT: pathfinding_fresh_approach`\n\nMAZE ACTION\
    \ SEQUENCE:\n1. Load relevant maze memories for this location\n2. Analyze current\
    \ position and available paths\n3. Choose strategy based on familiarity with maze\n\
    4. Make 1-2 movement buttons maximum\n5. Save discoveries and successful moves\
    \ for future reference\n\nUse pokemon_controller with directional movement only.\n"
  variables:
  - task
  - recent_actions
  - maze_context
  version: '1.0'
ai_emergency_recovery_with_escalation:
  name: AI Emergency Recovery with Escalation Control
  description: Multi-tier emergency system for when AI is severely stuck
  template: "\U0001F6A8 AI EMERGENCY RECOVERY SYSTEM \U0001F6A8\n\nEMERGENCY MODE\
    \ ACTIVATED - You have been stuck for multiple turns.\n\nProblem Pattern: {recent_actions}\n\
    Current Task: {task}\nEscalation Level: {escalation_level}\n\n\U0001F198 EMERGENCY\
    \ MEMORY COMMANDS:\n\n**Load Emergency Memories**:\n- `LOAD_MEMORIES: emergency_recoveries`\
    \ - Past successful unstuck strategies\n- `LOAD_MEMORIES: stuck_in_[current_context]`\
    \ - Context-specific unstuck methods\n- `LOAD_MEMORIES: last_resort_strategies`\
    \ - Nuclear option strategies\n- `LOAD_MEMORIES: similar_stuck_patterns` - How\
    \ similar situations were resolved\n\n**Emergency Prompt Escalation**:\n- `ESCALATE_PROMPT:\
    \ level_2` - More aggressive unstuck strategies\n- `ESCALATE_PROMPT: level_3`\
    \ - Drastic measures, ignore normal rules\n- `REQUEST_PROMPT: human_intervention_needed`\
    \ - Signal for help\n- `RESET_ALL_CONTEXT` - Complete fresh start\n\n\U0001F504\
    \ ESCALATION LEVELS:\n\n**Level 1 - Gentle Recovery** (3-5 repeated actions):\n\
    1. `LOAD_MEMORIES: gentle_unstuck_strategies`\n2. Try perpendicular movement to\
    \ stuck direction\n3. Single button press, opposite direction\n4. `SAVE_MEMORY:\
    \ attempted_gentle_recovery TAG: emergency_log`\n\n**Level 2 - Aggressive Recovery**\
    \ (6-10 repeated actions):\n1. `LOAD_MEMORIES: aggressive_unstuck_strategies`\n\
    2. Try random walk: random direction for 3 moves\n3. Try interaction: press A\
    \ button \n4. Try menu escape: press B button\n5. `ESCALATE_PROMPT: level_2`\n\
    \n**Level 3 - Nuclear Options** (10+ repeated actions):\n1. `LOAD_MEMORIES: last_resort_strategies`\n\
    2. Try button combinations: ['b', 'b'], ['start'], ['select']\n3. Try systematic\
    \ exploration: up, right, down, left sequence\n4. `REQUEST_PROMPT: human_intervention_needed`\n\
    5. `RESET_ALL_CONTEXT`\n\n\U0001F9E0 EMERGENCY ANALYSIS:\n\n**Identify Stuck Pattern**:\n\
    - Repeated same button 3+ times\n- No visual progress for 3+ screenshots  \n-\
    \ Stuck in menu loop\n- Movement blocked in all directions\n\n**Context-Specific\
    \ Recovery**:\n- **Battle Stuck**: `LOAD_MEMORIES: battle_menu_unstuck`\n- **Navigation\
    \ Stuck**: `LOAD_MEMORIES: movement_unstuck`\n- **Menu Stuck**: `LOAD_MEMORIES:\
    \ menu_escape_strategies`\n- **Unknown Context**: `LOAD_MEMORIES: universal_unstuck`\n\
    \n\U0001F4CA EMERGENCY LEARNING:\n\n**Save Recovery Strategies**:\n- `SAVE_MEMORY:\
    \ EMERGENCY_SUCCESS: [recovery_action] TAG: unstuck_[context]`\n- `SAVE_MEMORY:\
    \ failed_recovery: [failed_action] TAG: unstuck_avoid`\n- `SAVE_MEMORY: escalation_worked_at_level_[X]\
    \ TAG: emergency_strategies`\n\n**Track Stuck Patterns**:\n- `SAVE_MEMORY: STUCK_PATTERN:\
    \ [button_sequence] TAG: avoid_patterns`\n- `SAVE_MEMORY: stuck_context: [situation]\
    \ TAG: high_risk_areas`\n\n\U0001F3AF EMERGENCY ACTION PROTOCOL:\n\n**Immediate\
    \ Actions** (try in order):\n1. Load emergency memories: `LOAD_MEMORIES: emergency_recoveries`\n\
    2. Try opposite of stuck action\n3. Try perpendicular movement\n4. Try interaction\
    \ (A button)\n5. Try menu escape (B button)\n6. If nothing works: `ESCALATE_PROMPT:\
    \ level_2`\n\n**Post-Recovery**:\n1. `SAVE_MEMORY: RECOVERY_SUCCESS: [what_worked]\
    \ TAG: emergency_strategies`\n2. `SAVE_MEMORY: avoid_[stuck_pattern] TAG: prevention`\n\
    3. Resume normal operation with elevated caution\n\nEMERGENCY RULES:\n- Ignore\
    \ normal button limits - up to 3 buttons if necessary\n- Try completely different\
    \ approach from what was stuck\n- If recovery successful, MUST save the strategy\n\
    - If recovery fails, escalate to next level\n\nUse pokemon_controller with emergency\
    \ recovery button sequence.\n"
  variables:
  - recent_actions
  - task
  - escalation_level
  version: '1.0'
