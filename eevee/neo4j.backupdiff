diff --git a/eevee/CLAUDE.md b/eevee/CLAUDE.md
index a1b091d..501bbba 100644
--- a/eevee/CLAUDE.md
+++ b/eevee/CLAUDE.md
@@ -4,6 +4,7 @@
 
 Eevee v1 achieves **intelligent Pokemon gameplay through pure prompt engineering and visual intelligence** - no fine-tuning required. The system combines multimodal reasoning, spatial intelligence, **centralized multi-provider LLM API**, and **standardized JSON response parsing**.
 
+
 **Key Achievement**: Complex Pokemon gameplay behavior emerges from:
 - **Visual Context Analyzer**: 8-key spatial intelligence with grid coordinates
 - **AI-Directed Templates**: Context-aware prompts that adapt to navigation/battle/menu situations
@@ -43,25 +44,4 @@ EeveeAgent (game control) → PromptManager (AI templates) → LLM API (multi-pr
 - **Minimal error wrapping**: Don't catch and re-wrap exceptions unnecessarily
 - **Debug logging**: Use centralized debug logger, not console prints with emojis in production code
 
-#### **Examples**
-```python
-# ❌ BAD - importing inside function with excessive try/except
-def some_function():
-    try:
-        from evee_logger import get_comprehensive_logger
-        debug_logger = get_comprehensive_logger()
-        if debug_logger:
-            debug_logger.log_debug('INFO', 'message')
-        else:
-            print("emoji message")
-    except ImportError:
-        print("fallback message")
-
-# ✅ GOOD - clean imports and simple error handling
-from evee_logger import get_comprehensive_logger
-debug_logger = get_comprehensive_logger()
-
-def some_function():
-    if debug_logger:
-        debug_logger.log_debug('INFO', 'message')
-```
\ No newline at end of file
+ALWAYS RUN `LLM_PROVIDER=hybrid python run_eevee.py --goal "you are testing if the player is stuck and otherwise press B" --max-turns 1 --no-interactive after making a change`
\ No newline at end of file
diff --git a/eevee/memory/eevee_memory_default.db b/eevee/memory/eevee_memory_default.db
index e06591b..bc7b97e 100644
Binary files a/eevee/memory/eevee_memory_default.db and b/eevee/memory/eevee_memory_default.db differ
diff --git a/eevee/memory_default.json b/eevee/memory_default.json
index 471e9b2..c5a4af6 100644
--- a/eevee/memory_default.json
+++ b/eevee/memory_default.json
@@ -1,17 +1,17 @@
 {
   "battle_hp_critical": {
     "value": "heal",
-    "timestamp": 1750790060.835149,
+    "timestamp": 1750791045.3701298,
     "session": "default"
   },
   "battle_level_advantage": {
     "value": "attack",
-    "timestamp": 1750790060.83536,
+    "timestamp": 1750791045.370272,
     "session": "default"
   },
   "battle_type_effective": {
     "value": "use_super_effective_move",
-    "timestamp": 1750790060.835737,
+    "timestamp": 1750791045.370519,
     "session": "default"
   }
 }
\ No newline at end of file
diff --git a/eevee/prompt_manager.py b/eevee/prompt_manager.py
index bb7acc2..50519d2 100644
--- a/eevee/prompt_manager.py
+++ b/eevee/prompt_manager.py
@@ -478,13 +478,43 @@ Be specific about moves, types, and strategic recommendations.""",
         return self.get_prompt("pokemon_party_analysis", variables, verbose=verbose)
     
     def get_exploration_strategy_prompt(self, task: str, include_playbook: str = None, verbose: bool = False) -> str:
-        """Get formatted exploration strategy prompt"""
+        """Get formatted exploration strategy prompt with memory context"""
         variables = {"task": task}
+        
+        # Add memory context variables
+        try:
+            from memory_context_provider import MemoryContextProvider
+            memory_provider = MemoryContextProvider()
+            memory_context = memory_provider.get_memory_context_for_prompt(4)
+            variables.update(memory_context)
+            memory_provider.close()
+        except Exception as e:
+            # Fallback if memory system unavailable
+            variables.update({
+                "memory_recent_turns": "memory_unavailable",
+                "memory_patterns": "no_pattern_data", 
+                "memory_location_advice": "memory_system_error"
+            })
+            if verbose:
+                print(f"⚠️ Memory context unavailable: {e}")
+        
         return self.get_prompt("exploration_strategy", variables, include_playbook, verbose)
         
     def get_battle_analysis_prompt(self, task: str, recent_actions: str = "", verbose: bool = False) -> str:
-        """Get formatted battle analysis prompt"""
-        variables = {"task": task, "recent_actions": recent_actions}
+        """Get formatted battle analysis prompt with all required variables"""
+        variables = {
+            "task": task, 
+            "recent_actions": recent_actions,
+            # Required battle context variables with defaults
+            "scene_type": "battle",
+            "battle_phase": "unknown",
+            "our_pokemon": "unknown",
+            "enemy_pokemon": "unknown", 
+            "move_options": "unknown",
+            "cursor_on": "unknown",
+            "valid_buttons": "unknown",
+            "confidence": "low"
+        }
         return self.get_prompt("battle_analysis", variables, "battle", verbose)
     
     def add_playbook_entry(self, playbook_name: str, content: str, append: bool = True):
diff --git a/eevee/prompts/base/base_prompts.yaml b/eevee/prompts/base/base_prompts.yaml
index 105dd60..d105156 100644
--- a/eevee/prompts/base/base_prompts.yaml
+++ b/eevee/prompts/base/base_prompts.yaml
@@ -248,6 +248,11 @@ exploration_strategy:
     Valid Movements: {valid_movements}
     Confidence: {confidence}
     
+    **MEMORY CONTEXT:**
+    Recent turns: {memory_recent_turns}
+    Pattern analysis: {memory_patterns}
+    Location advice: {memory_location_advice}
+    
     **NAVIGATION ANALYSIS INSTRUCTIONS:**
     
     Use the spatial context above to analyze the overworld navigation situation:
@@ -262,6 +267,13 @@ exploration_strategy:
     - Avoid repeating failed movements from recent_actions
     - One button press per decision for careful movement
     
+    **MEMORY TOOLS AVAILABLE:**
+    You can optionally use these memory tools before making decisions:
+    - get_recent_memory(turns): Get last N turns to avoid repeating mistakes
+    - check_pattern(action): Check if action (up/down/left/right) succeeded before
+    - get_location_memory(visual_context): Get memory for current terrain/location
+    - store_observation(text, context): Store important discoveries
+    
     **VALID BUTTONS:**
     - Movement: "up", "down", "left", "right"
     - Actions: "a", "b", "start", "select"
@@ -272,11 +284,15 @@ exploration_strategy:
     {{
       "button_presses": ["up"],
       "reasoning": "north_clear_path",
-      "observations": "open_terrain",
+      "observations": "open_terrain", 
       "context_detected": "navigation",
-      "confidence": "high"
+      "confidence": "high",
+      "memory_used": false
     }}
     
+    If you use memory tools, include memory-based reasoning like:
+    "reasoning": "memoryGuided_north_safe_from_turn3"
+    
     Do not include any text before or after the JSON. No markdown, no code blocks, no explanations.
   variables:
   - task
@@ -287,7 +303,10 @@ exploration_strategy:
   - visual_description
   - valid_movements
   - confidence
-  version: '6.0'
+  - memory_recent_turns
+  - memory_patterns
+  - memory_location_advice
+  version: '6.1'
 inventory_analysis:
   name: Pokemon Inventory Analysis (JSON Response)
   description: Analyze bag contents and provide item management decisions
diff --git a/eevee/run_eevee.py b/eevee/run_eevee.py
index 7aa3b5e..b044346 100644
--- a/eevee/run_eevee.py
+++ b/eevee/run_eevee.py
@@ -1567,6 +1567,20 @@ class ContinuousGameplay:
                         "pixtral_analysis": movement_data.get("raw_pixtral_response", "Visual analysis complete")
                     })
                     
+                    # Add battle-specific variables if in battle scene
+                    if movement_data.get("scene_type") == "battle":
+                        our_pokemon = movement_data.get("our_pokemon", {})
+                        enemy_pokemon = movement_data.get("enemy_pokemon", {})
+                        
+                        variables.update({
+                            "battle_phase": movement_data.get("battle_phase", "unknown"),
+                            "our_pokemon": f"{our_pokemon.get('name', 'UNKNOWN')} (HP: {our_pokemon.get('hp', '?/?')}, Level: {our_pokemon.get('level', '?')})",
+                            "enemy_pokemon": f"{enemy_pokemon.get('name', 'UNKNOWN')} (Level: {enemy_pokemon.get('level', '?')})",
+                            "move_options": str(movement_data.get("move_options", [])),
+                            "cursor_on": movement_data.get("cursor_on", "unknown"),
+                            "valid_buttons": str(movement_data.get("valid_buttons", movement_data.get("valid_movements", [])))
+                        })
+                    
                     # Generate prompt with visual intelligence data
                     prompt = prompt_manager.get_prompt(
                         prompt_type, 
diff --git a/skyemu-mcp b/skyemu-mcp
--- a/skyemu-mcp
+++ b/skyemu-mcp
@@ -1 +1 @@
-Subproject commit 8d728d935e4da20ba4c4c7279c6b2b74124cab07
+Subproject commit 8d728d935e4da20ba4c4c7279c6b2b74124cab07-dirty
diff --git a/videogamebench b/videogamebench
--- a/videogamebench
+++ b/videogamebench
@@ -1 +1 @@
-Subproject commit faab53179cb4babdd102f35cb83c24a5f2c29d05
+Subproject commit faab53179cb4babdd102f35cb83c24a5f2c29d05-dirty
